{
  "$schema": "node_modules/oxlint/configuration_schema.json",
  "plugins": [
    "eslint",
    "typescript",
    "unicorn",
    "import",
    "vitest",
    "jest",
    "react",
    "react-perf",
    "jsx-a11y",
    "oxc",
    "promise"
  ],
  "categories": {
    "correctness": "off",
    "pedantic": "off",
    "perf": "error",
    "style": "off",
    "restriction": "off",
    "suspicious": "error"
  },
  "rules": {
    "eslint/*": "error",
    "eslint/no-await-in-loop": "warn",
    "eslint/id-length": "off",
    "eslint/no-ternary": "off",
    "eslint/prefer-string-slice": "off",
    "eslint/max-lines-per-function": "off",
    "eslint/max-lines": "off",
    "eslint/max-dependencies": "off",
    "eslint/no-magic-numbers": "off",
    "eslint/arrow-body-style": "off",
    "eslint/sort-keys": "off",
    "eslint/max-params": "off",
    "eslint/no-continue": "off",
    // TODO: This rule must be re-enabled
    "eslint/sort-imports": "off",
    "eslint/no-unused-vars": [
      "error",
      {
        "varsIgnorePattern": "^_",
        "argsIgnorePattern": "^_",
        "ignoreRestSiblings": true,
        "caughtErrors": false
      }
    ],
    // typescript
    "typescript/*": "error",
    "typescript/no-unsafe-type-assertion": "warn",
    "typescript/promise-function-async": "warn",
    "typescript/consistent-type-definitions": ["error", "type"],
    // unicorn
    "unicorn/*": "error",
    "unicorn/no-null": "off",
    "unicorn/prefer-global-this": "off",
    "unicorn/no-await-expression-member": "off",
    // import
    "import/*": "error",
    "import/default": "off",
    "import/prefer-default-export": "off",
    "import/no-named-export": "off",
    "import/group-exports": "off",
    "import/exports-last": "off",
    "import/max-dependencies": "off",
    // TODO: Investigate this one further, it seems like Biome is properly handling "type {} / { type }" imports, but linter should still flag it
    "import/consistent-type-specifier-style": "off",
    // vitest
    "vitest/*": "error",
    // jest
    "jest/*": "error",
    "jest/valid-expect": "off",
    "jest/valid-title": "warn",
    // TODO: This rule must be re-enabled
    "jest/prefer-lowercase-title": "warn",
    "jest/consistent-test-it": [
      "error",
      {
        "fn": "test"
      }
    ],
    // react
    "react/*": "error",
    "react/react-in-jsx-scope": "off",
    "react/no-array-index-key": "warn",
    "react/exhaustive-deps": "warn",
    // react-perf
    "react-perf/*": "error",
    "react-perf/jsx-no-new-function-as-prop": "warn",
    "react-perf/jsx-no-new-object-as-prop": "warn",
    "react-perf/jsx-no-jsx-as-prop": "warn",
    "react-perf/jsx-no-new-array-as-prop": "warn",
    // jsx-a11y
    "jsx-a11y/*": "error",
    // oxc
    "oxc/*": "error",
    // promise
    "promise/*": "error"
  }
}
